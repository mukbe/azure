#include "stdafx.h"
#include "Event.h"



//////////////////////////////////////////////////////////////////////////

Event* Event::instance = NULL;
std::multimap<std::string, IEvent*> Event::eventMap;
std::queue<EventProc> Event::eventQueue;

//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 생성자
//////////////////////////////////////////////////////////////////////////
Event::Event( void )
{

}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 소멸자
//////////////////////////////////////////////////////////////////////////
Event::~Event( void )
{
	eventMap.clear();
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 객체 사용
///@param 싱글톤 객체
//////////////////////////////////////////////////////////////////////////
Event* Event::Get()
{
	if(instance == NULL)
		instance = new Event();

	return instance;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 객체 사용 종료
//////////////////////////////////////////////////////////////////////////
void Event::Delete()
{
	SafeDelete(instance);
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 이벤트 리스너를 추가한다.
///@param name : 이벤트 명
///@param obj : 이벤트를 받아 수행할 객체
//////////////////////////////////////////////////////////////////////////
void Event::AddEventListener( std::string name, IEvent* obj )
{
	eventMap.insert(EventMap::value_type(name, obj));
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 수행할 이벤트를 등록한다.
///@param name : 이벤트 명
///@param args : 이벤트 추가정보
///@warning
///		이벤트 추가정보는 반드시 동적할당된 객체의 주소가 들어와야한다.
//////////////////////////////////////////////////////////////////////////
void Event::RegistEvent( std::string name, IEventArgs* args )
{
	EventProc temp;
	temp.name = name;
	temp.args = args;

	eventQueue.push(temp);
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 등록되어 있는 이벤트를 실행한다.
///@param name : 이벤트 명
///@param args : 이벤트 추가정보
///@warning
///		동적할당된 이벤트 추가정보 주소는 pop후 삭제된다.
//////////////////////////////////////////////////////////////////////////
void Event::ExecuteEvent()
{
	for(int i = 0; i < (int)eventQueue.size(); i++)
	{
		EventProc temp = eventQueue.front();

		for(EventMap::iterator i = eventMap.begin(); i != eventMap.end(); ++i)
		{
			if(i->first == temp.name)
				i->second->ProcessEvent(temp.name, temp.args);
		}

		SafeDelete(temp.args);
		eventQueue.pop();
	}
}